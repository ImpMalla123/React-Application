{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport * as contactActions from './contacts.actions';\nexport const contactsFeatureKey = \"contactsFeatureKey\";\nconst initialState = {\n  loading: false,\n  errorMessage: {},\n  contacts: [],\n  contact: {},\n  groups: [],\n  group: {}\n};\nexport const contactSlice = createSlice({\n  name: 'contactSlice',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    // get all contacts\n    builder.addCase(contactActions.getAllContactsAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.getAllContactsAction.fulfilled, (state, action) => {\n      state.loading = false;\n      state.contacts = action.payload;\n    }).addCase(contactActions.getAllContactsAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    }) // get a contact\n    .addCase(contactActions.getContactAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.getContactAction.fulfilled, (state, action) => {\n      state.loading = false;\n      state.contact = action.payload;\n    }).addCase(contactActions.getContactAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    }) // create a contact\n    .addCase(contactActions.createContactAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.createContactAction.fulfilled, (state, action) => {\n      state.loading = false;\n    }).addCase(contactActions.createContactAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    }) // update a contact\n    .addCase(contactActions.updateContactAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.updateContactAction.fulfilled, (state, action) => {\n      state.loading = false;\n    }).addCase(contactActions.updateContactAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    }) // delete a contact\n    .addCase(contactActions.deleteContactAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.deleteContactAction.fulfilled, (state, action) => {\n      state.loading = false;\n    }).addCase(contactActions.deleteContactAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    }) // get all groups\n    .addCase(contactActions.getAllGroupsAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.getAllGroupsAction.fulfilled, (state, action) => {\n      state.loading = false;\n      state.groups = action.payload;\n    }).addCase(contactActions.getAllGroupsAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    }) // get a group\n    .addCase(contactActions.getGroupAction.pending, (state, action) => {\n      state.loading = true;\n    }).addCase(contactActions.getGroupAction.fulfilled, (state, action) => {\n      state.loading = false;\n      state.group = action.payload;\n    }).addCase(contactActions.getGroupAction.rejected, (state, action) => {\n      state.loading = false;\n      state.errorMessage = action.error;\n    });\n  }\n});","map":{"version":3,"names":["createSlice","contactActions","contactsFeatureKey","initialState","loading","errorMessage","contacts","contact","groups","group","contactSlice","name","reducers","extraReducers","builder","addCase","getAllContactsAction","pending","state","action","fulfilled","payload","rejected","error","getContactAction","createContactAction","updateContactAction","deleteContactAction","getAllGroupsAction","getGroupAction"],"sources":["/home/mallappakadeshanavar/Documents/React Projects/Practice Model/first-app/src/redux/contacts/contacts.slice.ts"],"sourcesContent":["import {IContact} from \"../../modules/contacts/models/IContact\";\r\nimport {IGroup} from \"../../modules/contacts/models/IGroup\";\r\nimport {createSlice, SerializedError} from \"@reduxjs/toolkit\";\r\nimport * as contactActions from './contacts.actions';\r\n\r\nexport const contactsFeatureKey = \"contactsFeatureKey\";\r\n\r\nexport interface RootContactState {\r\n    [contactsFeatureKey]: InitialState\r\n}\r\n\r\nexport interface InitialState {\r\n    loading: boolean;\r\n    errorMessage: SerializedError;\r\n    contacts: IContact[];\r\n    contact: IContact;\r\n    groups: IGroup[];\r\n    group: IGroup;\r\n}\r\n\r\nconst initialState: InitialState = {\r\n    loading: false,\r\n    errorMessage: {} as SerializedError,\r\n    contacts: [] as IContact[],\r\n    contact: {} as IContact,\r\n    groups: [] as IGroup[],\r\n    group: {} as IGroup\r\n};\r\n\r\nexport const contactSlice = createSlice({\r\n    name: 'contactSlice',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n\r\n        // get all contacts\r\n        builder.addCase(contactActions.getAllContactsAction.pending, (state, action) => {\r\n            state.loading = true;\r\n        }).addCase(contactActions.getAllContactsAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n            state.contacts = action.payload;\r\n        }).addCase(contactActions.getAllContactsAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        })\r\n            // get a contact\r\n            .addCase(contactActions.getContactAction.pending, (state, action) => {\r\n                state.loading = true;\r\n            }).addCase(contactActions.getContactAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n            state.contact = action.payload;\r\n        }).addCase(contactActions.getContactAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        })\r\n            // create a contact\r\n            .addCase(contactActions.createContactAction.pending, (state, action) => {\r\n                state.loading = true;\r\n            }).addCase(contactActions.createContactAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n        }).addCase(contactActions.createContactAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        })\r\n            // update a contact\r\n            .addCase(contactActions.updateContactAction.pending, (state, action) => {\r\n                state.loading = true;\r\n            }).addCase(contactActions.updateContactAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n        }).addCase(contactActions.updateContactAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        })\r\n            // delete a contact\r\n            .addCase(contactActions.deleteContactAction.pending, (state, action) => {\r\n                state.loading = true;\r\n            }).addCase(contactActions.deleteContactAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n        }).addCase(contactActions.deleteContactAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        })\r\n            // get all groups\r\n            .addCase(contactActions.getAllGroupsAction.pending, (state, action) => {\r\n                state.loading = true;\r\n            }).addCase(contactActions.getAllGroupsAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n            state.groups = action.payload;\r\n        }).addCase(contactActions.getAllGroupsAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        })\r\n            // get a group\r\n            .addCase(contactActions.getGroupAction.pending, (state, action) => {\r\n                state.loading = true;\r\n            }).addCase(contactActions.getGroupAction.fulfilled, (state, action) => {\r\n            state.loading = false;\r\n            state.group = action.payload;\r\n        }).addCase(contactActions.getGroupAction.rejected, (state, action) => {\r\n            state.loading = false;\r\n            state.errorMessage = action.error;\r\n        });\r\n    }\r\n})"],"mappings":"AAEA,SAAQA,WAAR,QAA2C,kBAA3C;AACA,OAAO,KAAKC,cAAZ,MAAgC,oBAAhC;AAEA,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAeP,MAAMC,YAA0B,GAAG;EAC/BC,OAAO,EAAE,KADsB;EAE/BC,YAAY,EAAE,EAFiB;EAG/BC,QAAQ,EAAE,EAHqB;EAI/BC,OAAO,EAAE,EAJsB;EAK/BC,MAAM,EAAE,EALuB;EAM/BC,KAAK,EAAE;AANwB,CAAnC;AASA,OAAO,MAAMC,YAAY,GAAGV,WAAW,CAAC;EACpCW,IAAI,EAAE,cAD8B;EAEpCR,YAAY,EAAEA,YAFsB;EAGpCS,QAAQ,EAAE,EAH0B;EAIpCC,aAAa,EAAGC,OAAD,IAAa;IAExB;IACAA,OAAO,CAACC,OAAR,CAAgBd,cAAc,CAACe,oBAAf,CAAoCC,OAApD,EAA6D,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC5ED,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CAFD,EAEGW,OAFH,CAEWd,cAAc,CAACe,oBAAf,CAAoCI,SAF/C,EAE0D,CAACF,KAAD,EAAQC,MAAR,KAAmB;MACzED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACZ,QAAN,GAAiBa,MAAM,CAACE,OAAxB;IACH,CALD,EAKGN,OALH,CAKWd,cAAc,CAACe,oBAAf,CAAoCM,QAL/C,EAKyD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACxED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CARD,EASI;IATJ,CAUKR,OAVL,CAUad,cAAc,CAACuB,gBAAf,CAAgCP,OAV7C,EAUsD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACjED,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CAZL,EAYOW,OAZP,CAYed,cAAc,CAACuB,gBAAf,CAAgCJ,SAZ/C,EAY0D,CAACF,KAAD,EAAQC,MAAR,KAAmB;MACzED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACX,OAAN,GAAgBY,MAAM,CAACE,OAAvB;IACH,CAfD,EAeGN,OAfH,CAeWd,cAAc,CAACuB,gBAAf,CAAgCF,QAf3C,EAeqD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACpED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CAlBD,EAmBI;IAnBJ,CAoBKR,OApBL,CAoBad,cAAc,CAACwB,mBAAf,CAAmCR,OApBhD,EAoByD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACpED,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CAtBL,EAsBOW,OAtBP,CAsBed,cAAc,CAACwB,mBAAf,CAAmCL,SAtBlD,EAsB6D,CAACF,KAAD,EAAQC,MAAR,KAAmB;MAC5ED,KAAK,CAACd,OAAN,GAAgB,KAAhB;IACH,CAxBD,EAwBGW,OAxBH,CAwBWd,cAAc,CAACwB,mBAAf,CAAmCH,QAxB9C,EAwBwD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACvED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CA3BD,EA4BI;IA5BJ,CA6BKR,OA7BL,CA6Bad,cAAc,CAACyB,mBAAf,CAAmCT,OA7BhD,EA6ByD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACpED,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CA/BL,EA+BOW,OA/BP,CA+Bed,cAAc,CAACyB,mBAAf,CAAmCN,SA/BlD,EA+B6D,CAACF,KAAD,EAAQC,MAAR,KAAmB;MAC5ED,KAAK,CAACd,OAAN,GAAgB,KAAhB;IACH,CAjCD,EAiCGW,OAjCH,CAiCWd,cAAc,CAACyB,mBAAf,CAAmCJ,QAjC9C,EAiCwD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACvED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CApCD,EAqCI;IArCJ,CAsCKR,OAtCL,CAsCad,cAAc,CAAC0B,mBAAf,CAAmCV,OAtChD,EAsCyD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACpED,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CAxCL,EAwCOW,OAxCP,CAwCed,cAAc,CAAC0B,mBAAf,CAAmCP,SAxClD,EAwC6D,CAACF,KAAD,EAAQC,MAAR,KAAmB;MAC5ED,KAAK,CAACd,OAAN,GAAgB,KAAhB;IACH,CA1CD,EA0CGW,OA1CH,CA0CWd,cAAc,CAAC0B,mBAAf,CAAmCL,QA1C9C,EA0CwD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACvED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CA7CD,EA8CI;IA9CJ,CA+CKR,OA/CL,CA+Cad,cAAc,CAAC2B,kBAAf,CAAkCX,OA/C/C,EA+CwD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACnED,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CAjDL,EAiDOW,OAjDP,CAiDed,cAAc,CAAC2B,kBAAf,CAAkCR,SAjDjD,EAiD4D,CAACF,KAAD,EAAQC,MAAR,KAAmB;MAC3ED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACV,MAAN,GAAeW,MAAM,CAACE,OAAtB;IACH,CApDD,EAoDGN,OApDH,CAoDWd,cAAc,CAAC2B,kBAAf,CAAkCN,QApD7C,EAoDuD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MACtED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CAvDD,EAwDI;IAxDJ,CAyDKR,OAzDL,CAyDad,cAAc,CAAC4B,cAAf,CAA8BZ,OAzD3C,EAyDoD,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC/DD,KAAK,CAACd,OAAN,GAAgB,IAAhB;IACH,CA3DL,EA2DOW,OA3DP,CA2Ded,cAAc,CAAC4B,cAAf,CAA8BT,SA3D7C,EA2DwD,CAACF,KAAD,EAAQC,MAAR,KAAmB;MACvED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACT,KAAN,GAAcU,MAAM,CAACE,OAArB;IACH,CA9DD,EA8DGN,OA9DH,CA8DWd,cAAc,CAAC4B,cAAf,CAA8BP,QA9DzC,EA8DmD,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MAClED,KAAK,CAACd,OAAN,GAAgB,KAAhB;MACAc,KAAK,CAACb,YAAN,GAAqBc,MAAM,CAACI,KAA5B;IACH,CAjED;EAkEH;AAzEmC,CAAD,CAAhC"},"metadata":{},"sourceType":"module"}