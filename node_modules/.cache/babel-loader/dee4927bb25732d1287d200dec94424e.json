{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { ContactService } from \"../../modules/contacts/services/ContactService\";\nexport const getAllContactsAction = createAsyncThunk('getAllContactsAction', async () => {\n  let response = await ContactService.getAllContacts();\n  return response.data;\n});\nexport const getContactAction = createAsyncThunk('getContactAction', async contactId => {\n  let response = await ContactService.getContact(contactId);\n  return response.data;\n});\nexport const createContactAction = createAsyncThunk('createContactAction', async contact => {\n  let response = await ContactService.createContact(contact);\n  return response.data;\n});\nexport const updateContactAction = createAsyncThunk('updateContactAction', async payload => {\n  let {\n    contact,\n    contactId\n  } = payload;\n  let response = await ContactService.updateContact(contact, contactId);\n  return response.data;\n});\nexport const deleteContactAction = createAsyncThunk('deleteContactAction', async (contactId, _ref) => {\n  let {\n    dispatch\n  } = _ref;\n  let response = await ContactService.deleteContact(contactId);\n\n  if (response) {\n    dispatch(getAllContactsAction()); // get all contacts data, once delete is success\n  }\n\n  return response.data;\n});\nexport const getAllGroupsAction = createAsyncThunk('getAllGroups', async () => {\n  let response = await ContactService.getAllGroups();\n  return response.data;\n});\nexport const getGroupAction = createAsyncThunk('getGroupAction', async contact => {\n  let response = await ContactService.getGroup(contact);\n  return response.data;\n});","map":{"version":3,"names":["createAsyncThunk","ContactService","getAllContactsAction","response","getAllContacts","data","getContactAction","contactId","getContact","createContactAction","contact","createContact","updateContactAction","payload","updateContact","deleteContactAction","dispatch","deleteContact","getAllGroupsAction","getAllGroups","getGroupAction","getGroup"],"sources":["/home/mallappakadeshanavar/Documents/React Projects/Practice Model/first-app/src/redux/contacts/contacts.actions.ts"],"sourcesContent":["import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {ContactService} from \"../../modules/contacts/services/ContactService\";\r\nimport {IContact} from \"../../modules/contacts/models/IContact\";\r\n\r\nexport const getAllContactsAction = createAsyncThunk('getAllContactsAction', async () => {\r\n    let response = await ContactService.getAllContacts();\r\n    return response.data;\r\n});\r\n\r\nexport const getContactAction = createAsyncThunk('getContactAction', async (contactId: string) => {\r\n    let response = await ContactService.getContact(contactId);\r\n    return response.data;\r\n});\r\n\r\nexport const createContactAction = createAsyncThunk('createContactAction', async (contact: IContact) => {\r\n    let response = await ContactService.createContact(contact);\r\n    return response.data;\r\n});\r\n\r\nexport const updateContactAction = createAsyncThunk('updateContactAction', async (payload: { contact: IContact, contactId: string }) => {\r\n    let {contact, contactId} = payload;\r\n    let response = await ContactService.updateContact(contact, contactId);\r\n    return response.data;\r\n});\r\n\r\nexport const deleteContactAction = createAsyncThunk('deleteContactAction', async (contactId: string, {dispatch}) => {\r\n    let response = await ContactService.deleteContact(contactId);\r\n    if (response) {\r\n        dispatch(getAllContactsAction()); // get all contacts data, once delete is success\r\n    }\r\n    return response.data;\r\n});\r\n\r\nexport const getAllGroupsAction = createAsyncThunk('getAllGroups', async () => {\r\n    let response = await ContactService.getAllGroups();\r\n    return response.data;\r\n});\r\n\r\nexport const getGroupAction = createAsyncThunk('getGroupAction', async (contact: IContact) => {\r\n    let response = await ContactService.getGroup(contact);\r\n    return response.data;\r\n});\r\n\r\n\r\n"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,kBAA/B;AACA,SAAQC,cAAR,QAA6B,gDAA7B;AAGA,OAAO,MAAMC,oBAAoB,GAAGF,gBAAgB,CAAC,sBAAD,EAAyB,YAAY;EACrF,IAAIG,QAAQ,GAAG,MAAMF,cAAc,CAACG,cAAf,EAArB;EACA,OAAOD,QAAQ,CAACE,IAAhB;AACH,CAHmD,CAA7C;AAKP,OAAO,MAAMC,gBAAgB,GAAGN,gBAAgB,CAAC,kBAAD,EAAqB,MAAOO,SAAP,IAA6B;EAC9F,IAAIJ,QAAQ,GAAG,MAAMF,cAAc,CAACO,UAAf,CAA0BD,SAA1B,CAArB;EACA,OAAOJ,QAAQ,CAACE,IAAhB;AACH,CAH+C,CAAzC;AAKP,OAAO,MAAMI,mBAAmB,GAAGT,gBAAgB,CAAC,qBAAD,EAAwB,MAAOU,OAAP,IAA6B;EACpG,IAAIP,QAAQ,GAAG,MAAMF,cAAc,CAACU,aAAf,CAA6BD,OAA7B,CAArB;EACA,OAAOP,QAAQ,CAACE,IAAhB;AACH,CAHkD,CAA5C;AAKP,OAAO,MAAMO,mBAAmB,GAAGZ,gBAAgB,CAAC,qBAAD,EAAwB,MAAOa,OAAP,IAA6D;EACpI,IAAI;IAACH,OAAD;IAAUH;EAAV,IAAuBM,OAA3B;EACA,IAAIV,QAAQ,GAAG,MAAMF,cAAc,CAACa,aAAf,CAA6BJ,OAA7B,EAAsCH,SAAtC,CAArB;EACA,OAAOJ,QAAQ,CAACE,IAAhB;AACH,CAJkD,CAA5C;AAMP,OAAO,MAAMU,mBAAmB,GAAGf,gBAAgB,CAAC,qBAAD,EAAwB,OAAOO,SAAP,WAAyC;EAAA,IAAf;IAACS;EAAD,CAAe;EAChH,IAAIb,QAAQ,GAAG,MAAMF,cAAc,CAACgB,aAAf,CAA6BV,SAA7B,CAArB;;EACA,IAAIJ,QAAJ,EAAc;IACVa,QAAQ,CAACd,oBAAoB,EAArB,CAAR,CADU,CACwB;EACrC;;EACD,OAAOC,QAAQ,CAACE,IAAhB;AACH,CANkD,CAA5C;AAQP,OAAO,MAAMa,kBAAkB,GAAGlB,gBAAgB,CAAC,cAAD,EAAiB,YAAY;EAC3E,IAAIG,QAAQ,GAAG,MAAMF,cAAc,CAACkB,YAAf,EAArB;EACA,OAAOhB,QAAQ,CAACE,IAAhB;AACH,CAHiD,CAA3C;AAKP,OAAO,MAAMe,cAAc,GAAGpB,gBAAgB,CAAC,gBAAD,EAAmB,MAAOU,OAAP,IAA6B;EAC1F,IAAIP,QAAQ,GAAG,MAAMF,cAAc,CAACoB,QAAf,CAAwBX,OAAxB,CAArB;EACA,OAAOP,QAAQ,CAACE,IAAhB;AACH,CAH6C,CAAvC"},"metadata":{},"sourceType":"module"}